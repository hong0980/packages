--- a/web/gui/dashboard_info.js
+++ b/web/gui/dashboard_info.js
@@ -12,22 +12,21 @@
 
 netdataDashboard.menu = {
     'system': {
-        title: 'System Overview',
+        title: '系统概况',
         icon: '<i class="fas fa-bookmark"></i>',
-        info: 'Overview of the key system metrics.'
+        info: '一眼掌握系统信息关键指标'
     },
 
     'services': {
-        title: 'systemd Services',
+        title: '系统服务',
         icon: '<i class="fas fa-cogs"></i>',
-        info: 'Resources utilization of systemd services. netdata monitors all systemd services via CGROUPS ' +
-            '(the resources accounting used by containers). '
+        info: '系统服务的使用情况。netdata以CGROUPS监视所有系统服务。'
     },
 
     'ap': {
         title: 'Access Points',
         icon: '<i class="fas fa-wifi"></i>',
-        info: 'Performance metrics for the access points (i.e. wireless interfaces in AP mode) found on the system.'
+        info: '在系统上找到的接入点（即AP模式下的无线接口）的性能指标。'
     },
 
     'tc': {
@@ -45,183 +44,183 @@
     },
 
     'net': {
-        title: 'Network Interfaces',
+        title: '网络信息',
         icon: '<i class="fas fa-sitemap"></i>',
-        info: 'Performance metrics for network interfaces.'
+        info: '网络接口的详细信息。'
     },
 
     'ip': {
-        title: 'Networking Stack',
+        title: '网路堆叠',
         icon: '<i class="fas fa-cloud"></i>',
         info: function (os) {
             if (os === "linux")
-                return 'Metrics for the networking stack of the system. These metrics are collected from <code>/proc/net/netstat</code>, apply to both IPv4 and IPv6 traffic and are related to operation of the kernel networking stack.';
+                return '系统网络堆栈的度量标准。这些度量标准收集从<code>/proc/net/netstat</code>，适用于IPv4和IPv6两个交通和相关的内核网络栈的操作。';
             else
-                return 'Metrics for the networking stack of the system.';
+                return '系统网络堆栈的度量标准。';
         }
     },
 
     'ipv4': {
-        title: 'IPv4 Networking',
+        title: 'IPv4网络',
         icon: '<i class="fas fa-cloud"></i>',
-        info: 'Metrics for the IPv4 stack of the system. ' +
-            '<a href="https://en.wikipedia.org/wiki/IPv4" target="_blank">Internet Protocol version 4 (IPv4)</a> is ' +
-            'the fourth version of the Internet Protocol (IP). It is one of the core protocols of standards-based ' +
-            'internetworking methods in the Internet. IPv4 is a connectionless protocol for use on packet-switched ' +
-            'networks. It operates on a best effort delivery model, in that it does not guarantee delivery, nor does ' +
-            'it assure proper sequencing or avoidance of duplicate delivery. These aspects, including data integrity, ' +
-            'are addressed by an upper layer transport protocol, such as the Transmission Control Protocol (TCP).'
+        info: 'IPv4系统信息。' +
+            '<a href="https://en.wikipedia.org/wiki/IPv4" target="_blank">Internet Protocol version 4 (IPv4)</a> 是 ' +
+            '互联网协议（IP）的第四个版本。它是基于标准的核心协议之一 ' +
+            '互联网中的互联网方法。IPv4是用于分组交换的无连接协议网络。' +
+            '它采用尽力而为的交付模式，因为它不保证交付， ' +
+            '也不保证正确的顺序或避免重复交付。这些方面 ' +
+            '（包括数据完整性）由上层传输协议（如传输控制协议（TCP））处理。'
     },
 
     'ipv6': {
-        title: 'IPv6 Networking',
+        title: 'IPv6 网络',
         icon: '<i class="fas fa-cloud"></i>',
-        info: 'Metrics for the IPv6 stack of the system. <a href="https://en.wikipedia.org/wiki/IPv6" target="_blank">Internet Protocol version 6 (IPv6)</a> is the most recent version of the Internet Protocol (IP), the communications protocol that provides an identification and location system for computers on networks and routes traffic across the Internet. IPv6 was developed by the Internet Engineering Task Force (IETF) to deal with the long-anticipated problem of IPv4 address exhaustion. IPv6 is intended to replace IPv4.'
+        info: 'IPv6系统信息。<a href="https://en.wikipedia.org/wiki/IPv6" target="_blank">互联网协议版本6 (IPv6)</a> 是Internet协议（IP）的最新版本，该通信协议为网络上的计算机提供标识和定位系统，并在Internet上路由通信。IPv6是由Internet工程任务组（IETF）开发的，用于解决人们期待已久的IPv4地址耗尽问题。 IPv6旨在替代IPv4。'
     },
 
     'sctp': {
-        title: 'SCTP Networking',
+        title: 'SCTP网络',
         icon: '<i class="fas fa-cloud"></i>',
-        info: '<a href="https://en.wikipedia.org/wiki/Stream_Control_Transmission_Protocol" target="_blank">Stream Control Transmission Protocol (SCTP)</a> is a computer network protocol which operates at the transport layer and serves a role similar to the popular protocols TCP and UDP. SCTP provides some of the features of both UDP and TCP: it is message-oriented like UDP and ensures reliable, in-sequence transport of messages with congestion control like TCP. It differs from those protocols by providing multi-homing and redundant paths to increase resilience and reliability.'
+        info: '<a href="https://en.wikipedia.org/wiki/Stream_Control_Transmission_Protocol" target="_blank">Stream Control Transmission Protocol (SCTP)</a>是一种在传输层运行的计算机网络协议，其作用类似于流行的协议TCP和UDP。 SCTP提供了UDP和TCP的一些功能：它像UDP这样面向消息，并通过拥塞控制（如TCP）确保可靠，按顺序传输消息。 它与那些协议的不同之处在于，它提供了多宿主和冗余路径以提高弹性和可靠性。'
     },
 
     'ipvs': {
-        title: 'IP Virtual Server',
+        title: 'IP虚拟服务器',
         icon: '<i class="fas fa-eye"></i>',
-        info: '<a href="http://www.linuxvirtualserver.org/software/ipvs.html" target="_blank">IPVS (IP Virtual Server)</a> implements transport-layer load balancing inside the Linux kernel, so called Layer-4 switching. IPVS running on a host acts as a load balancer at the front of a cluster of real servers, it can direct requests for TCP/UDP based services to the real servers, and makes services of the real servers to appear as a virtual service on a single IP address.'
+        info: '<a href="http://www.linuxvirtualserver.org/software/ipvs.html" target="_blank">IPVS (IP Virtual Server)</a> 在Linux内核内部实现传输层负载平衡，即所谓的第4层交换。 在主机上运行的IPVS充当真实服务器群集前端的负载平衡器，它可以将对基于TCP / UDP的服务的请求定向到真实服务器，并使真实服务器的服务在服务器上显示为虚拟服务。 单个IP地址。'
     },
 
     'netfilter': {
-        title: 'Firewall (netfilter)',
+        title: '防火墙 (netfilter)',
         icon: '<i class="fas fa-shield-alt"></i>',
-        info: 'Performance metrics of the netfilter components.'
+        info: 'netfilter组件的系统信息。'
     },
 
     'ipfw': {
-        title: 'Firewall (ipfw)',
+        title: '防火墙 (ipfw)',
         icon: '<i class="fas fa-shield-alt"></i>',
-        info: 'Counters and memory usage for the ipfw rules.'
+        info: '防火墙(ipfw)规则的计数器和内存使用情况。'
     },
 
     'cpu': {
-        title: 'CPUs',
+        title: 'CPU',
         icon: '<i class="fas fa-bolt"></i>',
-        info: 'Detailed information for each CPU of the system. A summary of the system for all CPUs can be found at the <a href="#menu_system">System Overview</a> section.'
+        info: '系统中CPU的详细信息。全部CPU的信息可以到<a href="#menu_system"> 系统概况</a> 查看。'
     },
 
     'mem': {
-        title: 'Memory',
+        title: '内存',
         icon: '<i class="fas fa-microchip"></i>',
-        info: 'Detailed information about the memory management of the system.'
+        info: '系统内存的详细信息。'
     },
 
     'disk': {
-        title: 'Disks',
+        title: '存储',
         icon: '<i class="fas fa-hdd"></i>',
-        info: 'Charts with performance information for all the system disks. Special care has been given to present disk performance metrics in a way compatible with <code>iostat -x</code>. netdata by default prevents rendering performance charts for individual partitions and unmounted virtual disks. Disabled charts can still be enabled by configuring the relative settings in the netdata configuration file.'
+        info: '系统中所有存储性能信息图表。这是以<code>iostat -x</code>所取得的数据做为显示。在预设情况下netdata 不会显示单一分区与未挂载的虚拟磁盘性能图表。若仍想要显示，可以修改netdata设定中的相关设定。'
     },
 
     'sensors': {
-        title: 'Sensors',
+        title: '温度检测',
         icon: '<i class="fas fa-leaf"></i>',
-        info: 'Readings of the configured system sensors.'
+        info: '系统已配置相关测温器的数据'
     },
 
     'ipmi': {
         title: 'IPMI',
         icon: '<i class="fas fa-leaf"></i>',
-        info: 'The Intelligent Platform Management Interface (IPMI) is a set of computer interface specifications for an autonomous computer subsystem that provides management and monitoring capabilities independently of the host system\'s CPU, firmware (BIOS or UEFI) and operating system.'
+        info: '智能平台管理接口（IPMI）是用于计算机系统的一组计算机接口规范，它独立于主机系统的CPU，固件（BIOS或UEFI）和操作系统提供管理和监视功能。'
     },
 
     'samba': {
-        title: 'Samba',
+        title: '网络共享',
         icon: '<i class="fas fa-folder-open"></i>',
-        info: 'Performance metrics of the Samba file share operations of this system. Samba is a implementation of Windows services, including Windows SMB protocol file shares.'
+        info: 'Samba文件的性能指标共享此系统的操作。Samba是Windows服务的实现，包括Windows SMB协议文件共享。'
     },
 
     'nfsd': {
-        title: 'NFS Server',
+        title: 'NFS服务器',
         icon: '<i class="fas fa-folder-open"></i>',
-        info: 'Performance metrics of the Network File Server. NFS is a distributed file system protocol, allowing a user on a client computer to access files over a network, much like local storage is accessed. NFS, like many other protocols, builds on the Open Network Computing Remote Procedure Call (ONC RPC) system. The NFS is an open standard defined in Request for Comments (RFC).'
+        info: '网络文件服务器的性能指标。NFS是一种分布式文件系统协议，它允许客户端计算机上的用户通过网络访问文件，就像访问本地存储一样。 像许多其他协议一样，NFS建立在开放网络计算远程过程调用（ONC RPC）系统上。 NFS是在注释请求（RFC）中定义的开放标准。'
     },
 
     'nfs': {
-        title: 'NFS Client',
+        title: 'NFS客户端',
         icon: '<i class="fas fa-folder-open"></i>',
-        info: 'Performance metrics of the NFS operations of this system, acting as an NFS client.'
+        info: '显示本机NFS客户端的性能能指标。'
     },
 
     'zfs': {
-        title: 'ZFS filesystem',
+        title: 'ZFS文件系统',
         icon: '<i class="fas fa-folder-open"></i>',
-        info: 'Performance metrics of the ZFS filesystem. The following charts visualize all metrics reported by <a href="https://github.com/zfsonlinux/zfs/blob/master/cmd/arcstat/arcstat" target="_blank">arcstat.py</a> and <a href="https://github.com/zfsonlinux/zfs/blob/master/cmd/arc_summary/arc_summary3" target="_blank">arc_summary.py</a>.'
+        info: 'ZFS文件系统的性能指标。以下图表显示了<a href="https://github.com/zfsonlinux/zfs/blob/master/cmd/arcstat/arcstat" target="_blank">arcstat.py</a> 与 <a href="https://github.com/zfsonlinux/zfs/blob/master/cmd/arc_summary/arc_summary3" target="_blank">arc_summary.py</a>的性能数据。'
     },
 
     'btrfs': {
-        title: 'BTRFS filesystem',
+        title: 'BTRFS文件系统',
         icon: '<i class="fas fa-folder-open"></i>',
-        info: 'Disk space metrics for the BTRFS filesystem.'
+        info: 'BTRFS文件系统的磁盘空间信息。'
     },
 
     'apps': {
-        title: 'Applications',
+        title: '应用程序',
         icon: '<i class="fas fa-heartbeat"></i>',
-        info: 'Per application statistics are collected using netdata\'s <code>apps.plugin</code>. This plugin walks through all processes and aggregates statistics for applications of interest, defined in <code>/etc/netdata/apps_groups.conf</code>, which can be edited by running <code>$ /etc/netdata/edit-config apps_groups.conf</code> (the default is <a href="https://github.com/netdata/netdata/blob/master/collectors/apps.plugin/apps_groups.conf" target="_blank">here</a>). The plugin internally builds a process tree (much like <code>ps fax</code> does), and groups processes together (evaluating both child and parent processes) so that the result is always a chart with a predefined set of dimensions (of course, only application groups found running are reported). The reported values are compatible with <code>top</code>, although the netdata plugin counts also the resources of exited children (unlike <code>top</code> which shows only the resources of the currently running processes). So for processes like shell scripts, the reported values include the resources used by the commands these scripts run within each timeframe.',
+        info: '使用netdata的<code>apps.plugin</code>收集每个应用程序的统计信息。\'s 该插件遍历所有进程并汇总感兴趣的应用程序的统计信息，报告的值与<code>top</code>兼容，尽管netdata插件也计算已退出子进程的资源(与仅显示当前运行进程的资源的<code>top</code>不同)。因此，对于shell脚本之类的进程，报告的值包括这些脚本在每个时间段内运行的命令所使用的资源。',
         height: 1.5
     },
 
     'users': {
-        title: 'Users',
+        title: '用户',
         icon: '<i class="fas fa-user"></i>',
-        info: 'Per user statistics are collected using netdata\'s <code>apps.plugin</code>. This plugin walks through all processes and aggregates statistics per user. The reported values are compatible with <code>top</code>, although the netdata plugin counts also the resources of exited children (unlike <code>top</code> which shows only the resources of the currently running processes). So for processes like shell scripts, the reported values include the resources used by the commands these scripts run within each timeframe.',
+        info: 'netdata使用了<code>apps.plugin</code>收集每个应用程序的统计信息。\'s 该插件遍历所有进程并汇总感兴趣的应用程序的统计信息，报告的值与<code>top</code>兼容，尽管netdata插件也计算已退出子进程的资源(与仅显示当前运行进程的资源的<code>top</code>不同)。因此，对于shell脚本之类的进程，报告的值包括这些脚本在每个时间段内运行的命令所使用的资源。',
         height: 1.5
     },
 
     'groups': {
-        title: 'User Groups',
+        title: '用户组',
         icon: '<i class="fas fa-users"></i>',
-        info: 'Per user group statistics are collected using netdata\'s <code>apps.plugin</code>. This plugin walks through all processes and aggregates statistics per user group. The reported values are compatible with <code>top</code>, although the netdata plugin counts also the resources of exited children (unlike <code>top</code> which shows only the resources of the currently running processes). So for processes like shell scripts, the reported values include the resources used by the commands these scripts run within each timeframe.',
+        info: 'netdata使用了<code>apps.plugin</code>收集每个应用程序的统计信息。\'s 该插件遍历所有进程并汇总感兴趣的应用程序的统计信息，报告的值与<code>top</code>兼容，尽管netdata插件也计算已退出子进程的资源(与仅显示当前运行进程的资源的<code>top</code>不同)。因此，对于shell脚本之类的进程，报告的值包括这些脚本在每个时间段内运行的命令所使用的资源。',
         height: 1.5
     },
 
     'netdata': {
-        title: 'Netdata Monitoring',
+        title: 'Netdata监视',
         icon: '<i class="fas fa-chart-bar"></i>',
-        info: 'Performance metrics for the operation of netdata itself and its plugins.'
+        info: 'netdata本身与外置应用的统计信息。'
     },
 
     'aclk_test': {
         title: 'ACLK Test Generator',
-        info: 'For internal use to perform integration testing.'
+        info: '供内部使用以执行集成测试。'
     },
 
     'example': {
-        title: 'Example Charts',
-        info: 'Example charts, demonstrating the external plugin architecture.'
+        title: '图表示例',
+        info: '图表示例，展示了外部插件架构。'
     },
 
     'cgroup': {
         title: '',
         icon: '<i class="fas fa-th"></i>',
-        info: 'Container resource utilization metrics. Netdata reads this information from <b>cgroups</b> (abbreviated from <b>control groups</b>), a Linux kernel feature that limits and accounts resource usage (CPU, memory, disk I/O, network, etc.) of a collection of processes. <b>cgroups</b> together with <b>namespaces</b> (that offer isolation between processes) provide what we usually call: <b>containers</b>.'
+        info: '容器资源使用率指标。netdata从<b>cgroups</b> (<b>control groups</b> 的缩写) 中读取这些资讯，cgroups是Linux 核心的一个功能，做限制与计算程序集中的资源使用率 (CPU、内存、存储 I/O、网络...等等)。<b>cgroups</b>与<b>namespaces</b> (程序之间的隔离) 结合提供了我们所说的：<b>容器</b>。'
     },
 
     'cgqemu': {
         title: '',
         icon: '<i class="fas fa-th-large"></i>',
-        info: 'QEMU virtual machine resource utilization metrics. QEMU (short for Quick Emulator) is a free and open-source hosted hypervisor that performs hardware virtualization.'
+        info: 'QEMU 虚拟机资源使用率效能指标。QEMU(Quick Emulator)是自由与开源的虚拟机器平台，提供硬体虚拟化功能。'
     },
 
     'fping': {
         title: 'fping',
         icon: '<i class="fas fa-exchange-alt"></i>',
-        info: 'Network latency statistics, via <b>fping</b>. <b>fping</b> is a program to send ICMP echo probes to network hosts, similar to <code>ping</code>, but much better performing when pinging multiple hosts. fping versions after 3.15 can be directly used as netdata plugins.'
+        info: '通过<b>fping</b>的网络延迟统计信息。<b>fping</b>是一个程序，用于向网络主机发送ICMP回声探测，类似于<code>ping</code>，但是在ping多个主机时性能要好得多。 3.15之后的fping版本可以直接用作netdata插件。'
     },
 
     'gearman': {
         title: 'Gearman',
         icon: '<i class="fas fa-tasks"></i>',
-        info: 'Gearman is a job server that allows you to do work in parallel, to load balance processing, and to call functions between languages.'
+        info: 'Gearman是一个作业服务器，允许您并行执行工作，进行负载平衡处理以及在语言之间调用函数。'
     },
 
     'ioping': {
@@ -231,21 +230,21 @@
     },
 
     'httpcheck': {
-        title: 'Http Check',
+        title: 'Http检查',
         icon: '<i class="fas fa-heartbeat"></i>',
-        info: 'Web Service availability and latency monitoring using HTTP checks. This plugin is a specialized version of the port check plugin.'
+        info: '使用HTTP检查的Web服务可用性和延迟监视。 该插件是端口检查插件的专用版本。'
     },
 
     'memcached': {
-        title: 'memcached',
+        title: '内存缓存',
         icon: '<i class="fas fa-database"></i>',
-        info: 'Performance metrics for <b>memcached</b>. Memcached is a general-purpose distributed memory caching system. It is often used to speed up dynamic database-driven websites by caching data and objects in RAM to reduce the number of times an external data source (such as a database or API) must be read.'
+        info: 'memcached的性能指标<b>memcached</b>。Memcached是一个通用的分布式内存缓存系统。它通常用于通过在RAM中缓存数据和对象来加速动态数据库驱动的网站，以减少必须读取外部数据源（如数据库或API）的次数。'
     },
 
     'monit': {
         title: 'monit',
         icon: '<i class="fas fa-database"></i>',
-        info: 'Statuses of checks in <b>monit</b>. Monit is a utility for managing and monitoring processes, programs, files, directories and filesystems on a Unix system. Monit conducts automatic maintenance and repair and can execute meaningful causal actions in error situations.'
+        info: '<b>monit</b>中的检查状态。Monit是用于管理和监视Unix系统上的进程，程序，文件，目录和文件系统的实用程序。 Monit会执行自动维护和修复，并且可以在错误情况下执行有意义的因果操作。'
     },
 
     'mysql': {
@@ -263,19 +262,19 @@
     'redis': {
         title: 'Redis',
         icon: '<i class="fas fa-database"></i>',
-        info: 'Performance metrics for <b>redis</b>. Redis (REmote DIctionary Server) is a software project that implements data structure servers. It is open-source, networked, in-memory, and stores keys with optional durability.'
+        info: '<b>redis</b>的性能指标。Redis（远程字典服务器）是一个实现数据结构服务器的软件项目。 它是开源的，网络的，内存中的，并存储具有可选持久性的密钥。'
     },
 
     'rethinkdbs': {
         title: 'RethinkDB',
         icon: '<i class="fas fa-database"></i>',
-        info: 'Performance metrics for <b>rethinkdb</b>. RethinkDB is the first open-source scalable database built for realtime applications'
+        info: '<b>rethinkdb</b>的信息。RethinkDB是第一个为实时应用程序构建的开源可伸缩数据库'
     },
 
     'retroshare': {
         title: 'RetroShare',
         icon: '<i class="fas fa-share-alt"></i>',
-        info: 'Performance metrics for <b>RetroShare</b>. RetroShare is open source software for encrypted filesharing, serverless email, instant messaging, online chat, and BBS, based on a friend-to-friend network built on GNU Privacy Guard (GPG).'
+        info: '<b>RetroShare</b>的信息。RetroShare是基于GNU Privacy Guard（GPG）建立的朋友网络的开源软件，用于加密文件共享，无服务器电子邮件，即时消息，在线聊天和BBS'
     },
 
     'riakkv': {
@@ -287,7 +286,7 @@
     'ipfs': {
         title: 'IPFS',
         icon: '<i class="fas fa-folder-open"></i>',
-        info: 'Performance metrics for the InterPlanetary File System (IPFS), a content-addressable, peer-to-peer hypermedia distribution protocol.'
+        info: '行星际文件系统（IPFS）的信息，这是一种内容可寻址的对等超媒体分发协议。'
     },
 
     'phpfpm': {
@@ -304,9 +303,9 @@
     },
 
     'portcheck': {
-        title: 'Port Check',
+        title: '端口检查',
         icon: '<i class="fas fa-heartbeat"></i>',
-        info: 'Service availability and latency monitoring using port checks.'
+        info: '使用端口检查的服务可用性和延迟监视。'
     },
 
     'postfix': {
@@ -436,7 +435,7 @@
     'ntpd': {
         title: 'ntpd',
         icon: '<i class="fas fa-clock"></i>',
-        info: 'Provides statistics for the internal variables of the Network Time Protocol daemon <b><a href="http://www.ntp.org/">ntpd</a></b> and optional including the configured peers (if enabled in the module configuration). The module presents the performance metrics as shown by <b><a href="http://doc.ntp.org/current-stable/ntpq.html">ntpq</a></b> (the standard NTP query program) using NTP mode 6 UDP packets to communicate with the NTP server.'
+        info: '提供有关网络时间协议守护程序<b><a href="http://www.ntp.org/">ntpd</a></b>的内部变量的统计信息，并且还包括配置的对等项（如果启用）在模块配置中）。该模块显示性能指标，如<b><a href="http://doc.ntp.org/current-stable/ntpq.html">ntpq</a></b>（标准NTP查询）所示程序）使用NTP模式6 UDP数据包与NTP服务器进行通信。'
     },
 
     'spigotmc': {
@@ -470,21 +469,21 @@
     },
 
     'powersupply': {
-        title: 'Power Supply',
+        title: '电源',
         icon: '<i class="fas fa-battery-half"></i>',
-        info: 'Statistics for the various system power supplies. Data collected from <a href="https://www.kernel.org/doc/Documentation/power/power_supply_class.txt">Linux power supply class</a>.'
+        info: '各种系统电源的统计信息。从<a href="https://www.kernel.org/doc/Documentation/power/power_power_supply_class.txt">Linux电源类别</a>收集的数据。'
     },
 
     'xenstat': {
         title: 'Xen Node',
         icon: '<i class="fas fa-server"></i>',
-        info: 'General statistics for the Xen node. Data collected using <b>xenstat</b> library</a>.'
+        info: 'Xen节点的常规统计信息。使用<b>xenstat</b> library</a>收集的数据。'
     },
 
     'xendomain': {
         title: '',
         icon: '<i class="fas fa-th-large"></i>',
-        info: 'Xen domain resource utilization metrics. Netdata reads this information using <b>xenstat</b> library which gives access to the resource usage information (CPU, memory, disk I/O, network) for a virtual machine.'
+        info: 'Xen域资源利用率指标。Netdata使用 <b>xenstat</b> 读取此信息，该库可访问虚拟机的资源使用信息（CPU，内存，磁盘I/O，网络）。'
     },
 
     'wmi': {
@@ -496,7 +495,7 @@
     'perf': {
         title: 'Perf Counters',
         icon: '<i class="fas fa-tachometer-alt"></i>',
-        info: 'Performance Monitoring Counters (PMC). Data collected using <b>perf_event_open()</b> system call which utilises Hardware Performance Monitoring Units (PMU).'
+        info: '性能监视计数器（PMC）。系统硬件调用<b>perf_event_open()</b>收集的数据，该调用利用了硬件性能监视单元（PMU）。'
     },
 
     'vsphere': {
@@ -526,13 +525,13 @@
     'am2320': {
         title: 'AM2320 Sensor',
         icon: '<i class="fas fa-thermometer-half"></i>',
-        info: 'Readings from the external AM2320 Sensor.'
+        info: '来自外部AM2320传感器的读数。'
     },
 
     'scaleio': {
         title: 'ScaleIO',
         icon: '<i class="fas fa-database"></i>',
-        info: 'Performance and health statistics for various ScaleIO components. Data collected via VxFlex OS Gateway REST API.'
+        info: '各种ScaleIO组件的性能和运行状况统计信息。通过VxFlex OS网关REST API收集的数据。'
     },
 
     'squidlog': {
@@ -575,23 +574,23 @@
 // information about the submenus
 netdataDashboard.submenu = {
     'web_log.squid_bandwidth': {
-        title: 'bandwidth',
-        info: 'Bandwidth of responses (<code>sent</code>) by squid. This chart may present unusual spikes, since the bandwidth is accounted at the time the log line is saved by the server, even if the time needed to serve it spans across a longer duration. We suggest to use QoS (e.g. <a href="http://firehol.org/#fireqos" target="_blank">FireQOS</a>) for accurate accounting of the server bandwidth.'
+        title: '带宽',
+        info: 'squid的响应带宽(<code>发送</code>)。此图表可能会出现异常峰值，因为带宽是在服务器保存日志行时计算的，即使服务日志行所需的时间跨越较长的持续时间。我们建议使用QoS(e.g. <a href="http://firehol.org/#fireqos" target="_blank">FireQOS</a>)精确计算服务器带宽。'
     },
 
     'web_log.squid_responses': {
-        title: 'responses',
-        info: 'Information related to the responses sent by squid.'
+        title: '响应',
+        info: '与squid发送的响应有关的信息。'
     },
 
     'web_log.squid_requests': {
-        title: 'requests',
-        info: 'Information related to the requests squid has received.'
+        title: '请求',
+        info: 'squid已收到与请求相关的信息。'
     },
 
     'web_log.squid_hierarchy': {
-        title: 'hierarchy',
-        info: 'Performance metrics for the squid hierarchy used to serve the requests.'
+        title: '等级制',
+        info: '用于服务请求的squid层次结构的性能指标。'
     },
 
     'web_log.squid_squid_transport': {
@@ -599,13 +598,13 @@
     },
 
     'web_log.squid_squid_cache': {
-        title: 'cache',
-        info: 'Performance metrics for the performance of the squid cache.'
+        title: 'squid缓存',
+        info: 'squid缓存性能的性能指标。'
     },
 
     'web_log.squid_timings': {
-        title: 'timings',
-        info: 'Duration of squid requests. Unrealistic spikes may be reported, since squid logs the total time of the requests, when they complete. Especially for HTTPS, the clients get a tunnel from the proxy and exchange requests directly with the upstream servers, so squid cannot evaluate the individual requests and reports the total time the tunnel was open.'
+        title: 'squid请求的持续时间',
+        info: 'squid请求的持续时间。可能会报告不现实的峰值，因为squid会记录请求完成时的总时间。特别是对于HTTPS，客户端从代理服务器获得一个隧道，并直接与上游服务器交换请求，因此squid无法评估单个请求并报告隧道打开的总时间。'
     },
 
     'web_log.squid_clients': {
@@ -613,7 +612,7 @@
     },
 
     'web_log.bandwidth': {
-        info: 'Bandwidth of requests (<code>received</code>) and responses (<code>sent</code>). <code>received</code> requires an extended log format (without it, the web server log does not have this information). This chart may present unusual spikes, since the bandwidth is accounted at the time the log line is saved by the web server, even if the time needed to serve it spans across a longer duration. We suggest to use QoS (e.g. <a href="http://firehol.org/#fireqos" target="_blank">FireQOS</a>) for accurate accounting of the web server bandwidth.'
+        info: '请求（<code>received</code>）和响应（<code>sent</code>）的带宽。<code>received</code>需要扩展的日志格式（如果没有，则Web服务器日志不包含此信息）。该图表可能会出现异常的峰值，因为带宽是在Web服务器保存日志行时计算的，即使为它服务所需的时间跨越了更长的持续时间。我们建议使用QoS（例如<a href="http://firehol.org/#fireqos" target="_blank">FireQOS</a>）来准确计算Web服务器带宽。'
     },
 
     'web_log.urls': {
@@ -630,7 +629,7 @@
 
     'mem.ksm': {
         title: 'deduper (ksm)',
-        info: 'Kernel Same-page Merging (KSM) performance monitoring, read from several files in <code>/sys/kernel/mm/ksm/</code>. KSM is a memory-saving de-duplication feature in the Linux kernel (since version 2.6.32). The KSM daemon ksmd periodically scans those areas of user memory which have been registered with it, looking for pages of identical content which can be replaced by a single write-protected page (which is automatically copied if a process later wants to update its content). KSM was originally developed for use with KVM (where it was known as Kernel Shared Memory), to fit more virtual machines into physical memory, by sharing the data common between them.  But it can be useful to any application which generates many instances of the same data.'
+        info: 'Kernel Same-page Merging (KSM)性能监视，从<code>/sys/Kernel/mm/KSM/</code>中的多个文件读取。KSM是Linux内核中一种节省内存的重复数据消除功能（从版本2.6.32开始）。KSM守护进程ksmd定期扫描已注册的用户内存区域，查找可由单个写保护页替换的相同内容的页（如果进程稍后要更新其内容，则会自动复制该页）。KSM最初是为与KVM（在KVM中称为内核共享内存）一起使用而开发的，目的是通过共享虚拟机之间的公共数据，将更多虚拟机装入物理内存。但是对于生成同一数据的多个实例的任何应用程序都是有用的。'
     },
 
     'mem.hugepages': {
@@ -638,7 +637,7 @@
     },
 
     'mem.numa': {
-        info: 'Non-Uniform Memory Access (NUMA) is a hierarchical memory design the memory access time is dependent on locality. Under NUMA, a processor can access its own local memory faster than non-local memory (memory local to another processor or memory shared between processors). The individual metrics are described in the <a href="https://www.kernel.org/doc/Documentation/numastat.txt" target="_blank">Linux kernel documentation</a>.'
+        info: 'Non-Uniform Memory Access (NUMA) 是一种内存存取分隔设计，在NUMA之下，一个处理器存取自己管理的的内存，将比非自己管理的内存(另一个处理器所管理的内存或是共用内存) 具有更快速的效能。在 <a href="https://www.kernel.org/doc/Documentation/numastat.txt" target="_blank">Linux 核心文件</a> 中有详细说明这些指标。'
     },
 
     'ip.ecn': {
@@ -646,32 +645,32 @@
     },
 
     'netfilter.conntrack': {
-        title: 'connection tracker',
-        info: 'Netfilter Connection Tracker performance metrics. The connection tracker keeps track of all connections of the machine, inbound and outbound. It works by keeping a database with all open connections, tracking network and address translation and connection expectations.'
+        title: '连接跟踪器',
+        info: 'Netfilter连接跟踪器性能指标。连接跟踪器跟踪计算机的所有连接（入站和出站）。它通过使数据库保持所有打开的连接，跟踪网络和地址转换以及连接期望来工作。'
     },
 
     'netfilter.nfacct': {
-        title: 'bandwidth accounting',
-        info: 'The following information is read using the <code>nfacct.plugin</code>.'
+        title: '带宽核算',
+        info: '使用<code>nfacct.plugin</code>读取以下信息。'
     },
 
     'netfilter.synproxy': {
-        title: 'DDoS protection',
-        info: 'DDoS protection performance metrics. <a href="https://github.com/firehol/firehol/wiki/Working-with-SYNPROXY" target="_blank">SYNPROXY</a> is a TCP SYN packets proxy. It is used to protect any TCP server (like a web server) from SYN floods and similar DDoS attacks. It is a netfilter module, in the Linux kernel (since version 3.12). It is optimized to handle millions of packets per second utilizing all CPUs available without any concurrency locking between the connections. It can be used for any kind of TCP traffic (even encrypted), since it does not interfere with the content itself.'
+        title: 'DDoS保护',
+        info: 'DDoS保护性能指标。<a href="https://github.com/firehol/firehol/wiki/Working-with-SYNPROXY" target="_blank">SYNPROXY</a>是TCP SYN数据包代理。它用于保护任何TCP服务器（例如Web服务器）免受SYN泛滥和类似的DDoS攻击。它是Linux内核（自版本3.12起）中的netfilter模块。它经过优化，可以利用所有可用的CPU每秒处理数百万个数据包，而连接之间没有任何并发锁定。它可以用于任何类型的TCP通信（甚至加密），因为它不会干扰内容本身。'
     },
 
     'ipfw.dynamic_rules': {
-        title: 'dynamic rules',
-        info: 'Number of dynamic rules, created by correspondent stateful firewall rules.'
+        title: '动态规则',
+        info: '由相应的有状态防火墙规则创建的动态规则的数量。'
     },
 
     'system.softnet_stat': {
         title: 'softnet',
         info: function (os) {
             if (os === 'linux')
-                return 'Statistics for CPUs SoftIRQs related to network receive work. Break down per CPU core can be found at <a href="#menu_cpu_submenu_softnet_stat">CPU / softnet statistics</a>. <b>processed</b> states the number of packets processed, <b>dropped</b> is the number packets dropped because the network device backlog was full (to fix them on Linux use <code>sysctl</code> to increase <code>net.core.netdev_max_backlog</code>), <b>squeezed</b> is the number of packets dropped because the network device budget ran out (to fix them on Linux use <code>sysctl</code> to increase <code>net.core.netdev_budget</code> and/or <code>net.core.netdev_budget_usecs</code>). More information about identifying and troubleshooting network driver related issues can be found at <a href="https://access.redhat.com/sites/default/files/attachments/20150325_network_performance_tuning.pdf" target="_blank">Red Hat Enterprise Linux Network Performance Tuning Guide</a>.';
+                return '与网络接收工作相关的CPU软件IRQ统计。每个CPU核心的故障可以在<a href="#menu_cpu_submenu_softnet_stat">CPU / softnet statistics</a>。<b>已处理的</b>说明已处理的数据包数，<b>已丢弃的</b>是由于网络设备积压已满而丢弃的数据包数（要在Linux上修复它们，请使用<code>sysctl</code>增加<code>net.core.netdev_max_backlog</code>），<b>压缩的</b>是由于网络设备预算耗尽而丢弃的数据包数（要在Linux上修复这些数据包，请使用<code>sysctl</code>增加<code>net.core.netdev_预算</code>和/或<code>net.core.netdev_budget_usecs</code>）。有关识别和排除网络驱动程序相关问题的更多信息，请参阅<a href="https://access.redhat.com/sites/default/files/attachments/20150325_network_performance_tuning.pdf" target="_blank">Red Hat Enterprise Linux网络性能调整指南。';
             else
-                return 'Statistics for CPUs SoftIRQs related to network receive work.';
+                return '与网络接收工作相关的CPU软件IRQ统计。';
         }
     },
 
@@ -679,20 +678,20 @@
         title: 'softnet',
         info: function (os) {
             if (os === 'linux')
-                return 'Statistics for per CPUs core SoftIRQs related to network receive work. Total for all CPU cores can be found at <a href="#menu_system_submenu_softnet_stat">System / softnet statistics</a>. <b>processed</b> states the number of packets processed, <b>dropped</b> is the number packets dropped because the network device backlog was full (to fix them on Linux use <code>sysctl</code> to increase <code>net.core.netdev_max_backlog</code>), <b>squeezed</b> is the number of packets dropped because the network device budget ran out (to fix them on Linux use <code>sysctl</code> to increase <code>net.core.netdev_budget</code> and/or <code>net.core.netdev_budget_usecs</code>). More information about identifying and troubleshooting network driver related issues can be found at <a href="https://access.redhat.com/sites/default/files/attachments/20150325_network_performance_tuning.pdf" target="_blank">Red Hat Enterprise Linux Network Performance Tuning Guide</a>.';
+                return '与网络接收工作相关的每个CPU核心软件的统计。所有CPU核心的总数可以在 <a href="#menu_system_submenu_softnet_stat">信息中找到。<b>已处理的</b>说明已处理的数据包数，<b>已丢弃的</b>是由于网络设备积压已满而丢弃的数据包数（要在Linux上修复它们，请使用<code>sysctl</code>增加<code>net.core.netdev_max_backlog</code>），<b>压缩的</b>是由于网络设备预算耗尽而丢弃的数据包数（要在Linux上修复这些数据包，请使用<code>sysctl</code>增加<code>net.core.netdev_预算</code>和/或<code>net.core.netdev_预算usecs</code>）。有关识别和排除网络驱动程序相关问题的更多信息，请参阅<a href="https://access.redhat.com/sites/default/files/attachments/20150325_network_performance_tuning.pdf" target="_blank">Red Hat Enterprise Linux网络性能调整指南。';
             else
                 return 'Statistics for per CPUs core SoftIRQs related to network receive work. Total for all CPU cores can be found at <a href="#menu_system_submenu_softnet_stat">System / softnet statistics</a>.';
         }
     },
 
     'go_expvar.memstats': {
-        title: 'memory statistics',
-        info: 'Go runtime memory statistics. See <a href="https://golang.org/pkg/runtime/#MemStats" target="_blank">runtime.MemStats</a> documentation for more info about each chart and the values.'
+        title: '内存统计',
+        info: '进行运行时内存统计。有关每个图表及其值的更多信息，请参见<a href="https://golang.org/pkg/runtime/#MemStats" target="_blank">runtime.MemStats</a> 文档。'
     },
 
     'couchdb.dbactivity': {
         title: 'db activity',
-        info: 'Overall database reads and writes for the entire server. This includes any external HTTP traffic, as well as internal replication traffic performed in a cluster to ensure node consistency.'
+        info: '整个数据库对整个服务器的读写。这包括任何外部HTTP通信以及在群集中执行的内部复制通信，以确保节点一致性。'
     },
 
     'couchdb.httptraffic': {
@@ -711,12 +710,12 @@
 
     'couchdb.erlang': {
         title: 'erlang statistics',
-        info: 'Detailed information about the status of the Erlang VM that hosts CouchDB. These are intended for advanced users only. High values of the peak message queue (>10e6) generally indicate an overload condition.'
+        info: '有关托管CouchDB的Erlang VM的状态的详细信息。这些仅适用于高级用户。峰值消息队列的值较高（> 10e6）通常表示过载情况。'
     },
 
     'ntpd.system': {
-        title: 'system',
-        info: 'Statistics of the system variables as shown by the readlist billboard <code>ntpq -c rl</code>. System variables are assigned an association ID of zero and can also be shown in the readvar billboard <code>ntpq -c "rv 0"</code>. These variables are used in the <a href="http://doc.ntp.org/current-stable/discipline.html">Clock Discipline Algorithm</a>, to calculate the lowest and most stable offset.'
+        title: '系统',
+        info: '系统变量的统计信息，如阅读列表广告牌<code>ntpq -c rl</code>所示。系统变量的关联ID分配为零，也可以显示在readvar广告牌<code>ntpq -c "rv 0"</code>中。 这些变量在<a href="http://doc.ntp.org/current-stable/discipline.html">时钟纪律算法</a>中用于计算最低和最稳定的偏差。'
     },
 
     'ntpd.peers': {
@@ -746,15 +745,15 @@
     'system.cpu': {
         info: function (os) {
             void (os);
-            return 'Total CPU utilization (all cores). 100% here means there is no CPU idle time at all. You can get per core usage at the <a href="#menu_cpu">CPUs</a> section and per application usage at the <a href="#menu_apps">Applications Monitoring</a> section.'
-                + netdataDashboard.sparkline('<br/>Keep an eye on <b>iowait</b> ', 'system.cpu', 'iowait', '%', '. If it is constantly high, your disks are a bottleneck and they slow your system down.')
-                + netdataDashboard.sparkline('<br/>An important metric worth monitoring, is <b>softirq</b> ', 'system.cpu', 'softirq', '%', '. A constantly high percentage of softirq may indicate network driver issues.');
+            return 'CPU使用率总表(全部核心)。当数值为100%时，表示您的CPU非常忙碌没有空闲时间。您可以在<a href="#menu_cpu">CPU</a>以及<a href="#menu_apps">应用程序</a> 深入了解每个核心与应用程序的使用情况。'
+                + netdataDashboard.sparkline('<br/>请特别注意<b>iowait</b>', 'system.cpu', 'iowait', '%', '，如果它一直处于较高的情况，这表示您的磁盘是效能瓶颈，您的系统效能会明显降低。')
+                + netdataDashboard.sparkline('<br/>另一个重要的指标是<b>softirq</b>', 'system.cpu', 'softirq', '%', '，若这个数值持续在较高的情况，很有可能是您的网路驱动部份有问题。');
         },
         valueRange: "[0, 100]"
     },
 
     'system.load': {
-        info: 'Current system load, i.e. the number of processes using CPU or waiting for system resources (usually CPU and disk). The 3 metrics refer to 1, 5 and 15 minute averages. The system calculates this once every 5 seconds. For more information check <a href="https://en.wikipedia.org/wiki/Load_(computing)" target="_blank">this wikipedia article</a>',
+        info: '目前系统的负载，也就是指CPU使用情况或正在等待系统资源(通常是CPU与磁盘)。这三个指标分别是 1、5、15 分钟。系统每5秒会刷新一次。更多的信息可以参考<a href="https://en.wikipedia.org/wiki/Load_(computing)" target="_blank">维基百科</a>的说明。',
         height: 0.7
     },
 
@@ -785,95 +784,95 @@
 
     'system.io': {
         info: function (os) {
-            var s = 'Total Disk I/O, for all physical disks. You can get detailed information about each disk at the <a href="#menu_disk">Disks</a> section and per application Disk usage at the <a href="#menu_apps">Applications Monitoring</a> section.';
+            var s = '磁盘I/O总计, 包含所有的实体磁盘。您可以在 <a href="#menu_disk">磁盘</a>查看每一个磁盘的详细资讯，也可以在 <a href="#menu_apps">应用程序</a> 了解每个应用程序对于磁盘的使用情况。';
 
             if (os === 'linux')
-                return s + ' Physical are all the disks that are listed in <code>/sys/block</code>, but do not exist in <code>/sys/devices/virtual/block</code>.';
+                return s + ' 实体磁盘指的是<code>/sys/block</code>中有列出，但是没有在 <code>/sys/devices/virtual/block</code> 的所有磁盘。';
             else
                 return s;
         }
     },
 
     'system.pgpgio': {
-        info: 'Memory paged from/to disk. This is usually the total disk I/O of the system.'
+        info: '从内存分页到硬盘的I/O。通常是这个系统所有磁盘的总I/O。'
     },
 
     'system.swapio': {
-        info: 'Total Swap I/O. (netdata measures both <code>in</code> and <code>out</code>. If either of the metrics <code>in</code> or <code>out</code> is not shown in the chart, the reason is that the metric is zero. - you can change the page settings to always render all the available dimensions on all charts).'
+        info: '所有的Swap I/O。(netdata 会合并显示 <code>输入</code>与<code>输出</code>。如果图表中没有任何数值，则表示为 0。您可以修改这一页的设定，让图表显示固定的角度。'
     },
 
     'system.pgfaults': {
-        info: 'Total page faults. <b>Major page faults</b> indicates that the system is using its swap. You can find which applications use the swap at the <a href="#menu_apps">Applications Monitoring</a> section.'
+        info: '所有的Page错误。<b>主要页面错误</b> 表明系统正在使用其交换功能。您可以在<a href="#menu_apps">应用程序监视</a>部分中找到使用交换的应用程序。'
     },
 
     'system.entropy': {
         colors: '#CC22AA',
-        info: '<a href="https://en.wikipedia.org/wiki/Entropy_(computing)" target="_blank">Entropy</a>, is a pool of random numbers (<a href="https://en.wikipedia.org/wiki//dev/random" target="_blank">/dev/random</a>) that is mainly used in cryptography. If the pool of entropy gets empty, processes requiring random numbers may run a lot slower (it depends on the interface each program uses), waiting for the pool to be replenished. Ideally a system with high entropy demands should have a hardware device for that purpose (TPM is one such device). There are also several software-only options you may install, like <code>haveged</code>, although these are generally useful only in servers.'
+        info: '<a href="https://en.wikipedia.org/wiki/Entropy_(computing)" target="_blank">Entropy</a>，是一个主要用于密码术的随机数 (<a href="https://en.wikipedia.org/wiki//dev/random" target="_blank">/dev/random</a>)池。如果Entropy池变空，则需要随机数的进程的运行速度可能会慢很多（这取决于每个程序使用的接口），等待池被补充。 理想情况下，具有高Entropy要求的系统应具有用于该目的的硬件设备（TPM是这样一种设备）。 您也可以安装几个纯软件选件，例如hadged，尽管它们通常仅在服务器中有用。'
     },
 
     'system.forks': {
         colors: '#5555DD',
-        info: 'Number of new processes created.'
+        info: '建立新程序的数量。'
     },
 
     'system.intr': {
         colors: '#DD5555',
-        info: 'Total number of CPU interrupts. Check <code>system.interrupts</code> that gives more detail about each interrupt and also the <a href="#menu_cpu">CPUs</a> section where interrupts are analyzed per CPU core.'
+        info: 'CPU中断的总数。通过检查<code>system.interrupts</code>，得知每一个中断的细节信息。在<a href="#menu_cpu"> CPU </a>提供每一个CPU核心的中断情形。'
     },
 
     'system.interrupts': {
-        info: 'CPU interrupts in detail. At the <a href="#menu_cpu">CPUs</a> section, interrupts are analyzed per CPU core.'
+        info: 'CPU中断的细节。在<a href="#menu_cpu"> CPU </a>中，依据每个CPU核心分析中断。'
     },
 
     'system.softirqs': {
-        info: 'CPU softirqs in detail. At the <a href="#menu_cpu">CPUs</a> section, softirqs are analyzed per CPU core.'
+        info: 'CPU softirqs的细节。在<a href="#menu_cpu">CPU</a>中，依据每个CPU核心分析softirqs。'
     },
 
     'system.processes': {
-        info: 'System processes. <b>Running</b> are the processes in the CPU. <b>Blocked</b> are processes that are willing to enter the CPU, but they cannot, e.g. because they wait for disk activity.'
+        info: '系统程序。<b>Running</b>显示正在CPU中的程序。<b>Blocked</b>显示目前被挡下无法进入CPU执行的程序，例如：正在等待磁盘完成动作，才能继续。'
     },
 
     'system.active_processes': {
-        info: 'All system processes.'
+        info: '所有的系统程序。'
     },
 
     'system.ctxt': {
-        info: '<a href="https://en.wikipedia.org/wiki/Context_switch" target="_blank">Context Switches</a>, is the switching of the CPU from one process, task or thread to another. If there are many processes or threads willing to execute and very few CPU cores available to handle them, the system is making more context switching to balance the CPU resources among them. The whole process is computationally intensive. The more the context switches, the slower the system gets.'
+        info: '<a href="https://en.wikipedia.org/wiki/Context_switch" target="_blank">Context Switches</a>，是将CPU从一个进程，任务或线程切换到另一进程，任务或线程。 如果有许多进程或线程愿意执行，而只有很少的CPU内核来处理它们，则系统将进行更多上下文切换以平衡其中的CPU资源。 整个过程是计算密集型的。 上下文切换越多，系统运行速度越慢。'
     },
 
     'system.idlejitter': {
-        info: 'Idle jitter is calculated by netdata. A thread is spawned that requests to sleep for a few microseconds. When the system wakes it up, it measures how many microseconds have passed. The difference between the requested and the actual duration of the sleep, is the <b>idle jitter</b>. This number is useful in real-time environments, where CPU jitter can affect the quality of the service (like VoIP media gateways).'
+        info: 'Idle jitter 是由netdata计算而得。当一个执行绪要求睡眠 (Sleep) 时，需要几个微秒的时间。当系统要唤醒它时，会量测它用了多少个微秒的时间。要求睡眠与实际睡眠时间的差异就是 <b>idle jitter</b>。这个数字在即时的环境中非常有用，因为 CPU jitter 将会影响服务的品质 (例如 VoIP media gateways)。'
     },
 
     'system.net': {
         info: function (os) {
-            var s = 'Total bandwidth of all physical network interfaces. This does not include <code>lo</code>, VPNs, network bridges, IFB devices, bond interfaces, etc. Only the bandwidth of physical network interfaces is aggregated.';
+            var s = '所有物理网卡的总带宽。不包含<code>lo</code>、VPN、网路桥接、IFB装置、介面聚合(Bond).. 等。将合并显示实体网络界面的带宽使用情况。';
 
             if (os === 'linux')
-                return s + ' Physical are all the network interfaces that are listed in <code>/proc/net/dev</code>, but do not exist in <code>/sys/devices/virtual/net</code>.';
+                return s + ' 物理是<code>/proc/net/dev</code>中列出的所有网络接口，但在<code>/sys/devices/virtual/net </code>中不存在。';
             else
                 return s;
         }
     },
 
     'system.ip': {
-        info: 'Total IP traffic in the system.'
+        info: 'IP 总流量。'
     },
 
     'system.ipv4': {
-        info: 'Total IPv4 Traffic.'
+        info: 'IPv4 总流量。'
     },
 
     'system.ipv6': {
-        info: 'Total IPv6 Traffic.'
+        info: 'IPv6 总流量。'
     },
 
     'system.ram': {
-        info: 'System Random Access Memory (i.e. physical memory) usage.'
+        info: '系统随机存取内存(也就是实体内存) 使用情况。'
     },
 
     'system.swap': {
-        info: 'System swap memory usage. Swap space is used when the amount of physical memory (RAM) is full. When the system needs more memory resources and the RAM is full, inactive pages in memory are moved to the swap space (usually a disk, a disk partition or a file).'
+        info: '系统交换空间(Swap)内存使用情况。Swap空间会在实体内存(RAM)已满的情况下使用。当系统内存已满但还需要使用更多内存情况下，系统内存中的比较没有异动的Page将会被移动到Swap空间(通常是磁盘、磁盘分区或是文件)。'
     },
 
     // ------------------------------------------------------------------------
@@ -929,62 +928,62 @@
     },
 
     'mem.zram_usage': {
-        info: 'ZRAM total RAM usage metrics. ZRAM uses some memory to store metadata about stored memory pages, thus introducing an overhead which is proportional to disk size. It excludes same-element-filled-pages since no memory is allocated for them.'
+        info: 'ZRAM总RAM使用率指标。ZRAM使用一些内存来存储有关已存储的内存页面的元数据，因此会产生与磁盘大小成比例的开销。 它排除了相同元素填充的页面，因为没有为它们分配任何内存。'
     },
 
     'mem.zram_savings': {
-        info: 'Displays original and compressed memory data sizes.'
+        info: '显示原始和压缩内存的数据大小。'
     },
 
     'mem.zram_ratio': {
         heads: [
-            netdataDashboard.gaugeChart('Compression Ratio', '12%', 'ratio', '#0099CC')
+            netdataDashboard.gaugeChart('压缩率', '12%', 'ratio', '#0099CC')
         ],
-        info: 'Compression ratio, calculated as <code>100 * original_size / compressed_size</code>. More means better compression and more RAM savings.'
+        info: '压缩率，计算方式为<code>100 * original_size / compressed_size</code>。 更多意味着更好的压缩和更多的RAM节省。'
     },
 
     'mem.zram_efficiency': {
         heads: [
-            netdataDashboard.gaugeChart('Efficiency', '12%', 'percent', NETDATA.colors[0])
+            netdataDashboard.gaugeChart('效率', '12%', 'percent', NETDATA.colors[0])
         ],
         commonMin: true,
         commonMax: true,
         valueRange: "[0, 100]",
-        info: 'Memory usage efficiency, calculated as <code>100 * compressed_size / total_mem_used</code>.'
+        info: '内存使用效率，计算方式为<code>100 * original_size / compressed_size</code>。'
     },
 
 
     'mem.pgfaults': {
-        info: 'A <a href="https://en.wikipedia.org/wiki/Page_fault" target="_blank">page fault</a> is a type of interrupt, called trap, raised by computer hardware when a running program accesses a memory page that is mapped into the virtual address space, but not actually loaded into main memory. If the page is loaded in memory at the time the fault is generated, but is not marked in the memory management unit as being loaded in memory, then it is called a <b>minor</b> or soft page fault. A <b>major</b> page fault is generated when the system needs to load the memory page from disk or swap memory.'
+        info: '<a href="https://en.wikipedia.org/wiki/Page_fault" target="_blank">页面错误</a> 是一种中断，称为陷阱，由运行中的程序访问映射到虚拟地址空间中但未实际加载到主存储器中的内存页面时，由计算机硬件引发。 如果在产生故障时将页面加载到内存中，但是在内存管理单元中未将页面标记为正在加载到内存中，则该页面称为次要页面错误或软页面错误。 当系统需要从磁盘或交换内存加载内存页面时，将产生主要页面错误。'
     },
 
     'mem.committed': {
         colors: NETDATA.colors[3],
-        info: 'Committed Memory, is the sum of all memory which has been allocated by processes.'
+        info: 'Committed内存，是指程序分配到的所有内存总计。'
     },
 
     'mem.available': {
-        info: 'Available Memory is estimated by the kernel, as the amount of RAM that can be used by userspace processes, without causing swapping.'
+        info: '可用内存是由核心估算而来，也就是使用者空间程序可以使用的RAM总量，而不会造成交换 (Swap) 发生。'
     },
 
     'mem.writeback': {
-        info: '<b>Dirty</b> is the amount of memory waiting to be written to disk. <b>Writeback</b> is how much memory is actively being written to disk.'
+        info: '<b>Dirty</b>是等待写入磁盘的内存量。<b>Writeback</b>是主动写入磁盘的内存量。'
     },
 
     'mem.kernel': {
-        info: 'The total amount of memory being used by the kernel. <b>Slab</b> is the amount of memory used by the kernel to cache data structures for its own use. <b>KernelStack</b> is the amount of memory allocated for each task done by the kernel. <b>PageTables</b> is the amount of memory decicated to the lowest level of page tables (A page table is used to turn a virtual address into a physical memory address). <b>VmallocUsed</b> is the amount of memory being used as virtual address space.'
+        info: '内核正在使用的内存总量。<b>Slab</b>是内核用于缓存供自己使用的数据结构的内存量。<b>KernelStack</b>是内核为每个任务分配的内存量。<b>PageTables</b>是分配给页表的最低级别的内存量（页表用于将虚拟地址转换为物理内存地址）。<b>VmallocUsed</b>是用作虚拟地址空间的内存量。'
     },
 
     'mem.slab': {
-        info: '<b>Reclaimable</b> is the amount of memory which the kernel can reuse. <b>Unreclaimable</b> can not be reused even when the kernel is lacking memory.'
+        info: '<b>可回收</b>是内核可以重用的内存量。<b>Unreclaimable</b>即使内核缺少内存也无法重用。'
     },
 
     'mem.hugepages': {
-        info: 'Dedicated (or Direct) HugePages is memory reserved for applications configured to utilize huge pages. Hugepages are <b>used</b> memory, even if there are free hugepages available.'
+        info: '专用（或直接HugePages是为配置为利用大页面的应用程序保留的内存。即使有可用的免费大页面，大页面也是<b>已使用</b>的内存。'
     },
 
     'mem.transparent_hugepages': {
-        info: 'Transparent HugePages (THP) is backing virtual memory with huge pages, supporting automatic promotion and demotion of page sizes. It works for all applications for anonymous memory mappings and tmpfs/shmem.'
+        info: '透明HugePages（THP）支持具有大页面的虚拟内存，支持页面大小的自动提升和降级。 它适用于所有用于匿名内存映射和tmpfs / shmem的应用程序。'
     },
 
     // ------------------------------------------------------------------------
@@ -1009,7 +1008,7 @@
     },
 
     'ip.tcpconnaborts': {
-        info: 'TCP connection aborts. <b>baddata</b> (<code>TCPAbortOnData</code>) happens while the connection is on <code>FIN_WAIT1</code> and the kernel receives a packet with a sequence number beyond the last one for this connection - the kernel responds with <code>RST</code> (closes the connection). <b>userclosed</b> (<code>TCPAbortOnClose</code>) happens when the kernel receives data on an already closed connection and responds with <code>RST</code>. <b>nomemory</b> (<code>TCPAbortOnMemory</code> happens when there are too many orphaned sockets (not attached to an fd) and the kernel has to drop a connection - sometimes it will send an <code>RST</code>, sometimes it won\'t. <b>timeout</b> (<code>TCPAbortOnTimeout</code>) happens when a connection times out. <b>linger</b> (<code>TCPAbortOnLinger</code>) happens when the kernel killed a socket that was already closed by the application and lingered around for long enough. <b>failed</b> (<code>TCPAbortFailed</code>) happens when the kernel attempted to send an <code>RST</code> but failed because there was no memory available.'
+        info: 'TCP连接异常终止。<b>baddata</b> (<code>TCPAbortOnData</code>)在连接处于<code>FIN_WAIT1</code> 上时发生，并且内核接收到该连接的序列号超出最后一个的数据包，内核以<code>RST</code>响应（关闭连接）。<b>userclosed</b> (<code>TCPAbortOnClose</code>) 在内核通过已关闭的连接接收数据并以 <code>RST</code>响应时发生。<b>nomemory</b> (<code>TCPAbortOnMemory</code>发生在孤立套接字过多（未附加到fd）并且内核必须断开连接的情况下，有时它将发送<code>RST</code>，有时不会。<b>timeout</b> (<code>TCPAbortOnTimeout</code>) 在连接超时时发生。<b>linger</b> (<code>TCPAbortOnLinger</code>)发生在内核杀死了一个已经被应用程序关闭并且已经徘徊了很长时间的套接字时。<b>failed</b> (<code>TCPAbortFailed</code>)发生在内核试图发送<code>RST</ code>，但失败，因为没有可用的内存。'
     },
 
     'ip.tcp_syn_queue': {
@@ -1037,25 +1036,25 @@
     // IPv4
 
     'ipv4.tcpsock': {
-        info: 'The number of established TCP connections (known as <code>CurrEstab</code>). This is a snapshot of the established connections at the time of measurement (i.e. a connection established and a connection disconnected within the same iteration will not affect this metric).'
+        info: '已建立的TCP连接数（称为<code>CurrEstab</code>）。这是在测量时已建立的连接的快照（就是在同一迭代内建立的连接和断开的连接不会影响该指标）。'
     },
 
     'ipv4.tcpopens': {
-        info: '<b>active</b> or <code>ActiveOpens</code> is the number of outgoing TCP <b>connections attempted</b> by this host.'
-            + ' <b>passive</b> or <code>PassiveOpens</code> is the number of incoming TCP <b>connections accepted</b> by this host.'
+        info: '<b>active</b>或<code>ActiveOpens</code>是此主机尝试的传出TCP<b>连接</b>的数量。'
+            + '<b>passive</b>或<code>PassiveOpens</code>是此主机接受的传入TCP<b>连接</b>的数量。'
     },
 
     'ipv4.tcperrors': {
-        info: '<code>InErrs</code> is the number of TCP segments received in error (including header too small, checksum errors, sequence errors, bad packets - for both IPv4 and IPv6).'
-            + ' <code>InCsumErrors</code> is the number of TCP segments received with checksum errors (for both IPv4 and IPv6).'
-            + ' <code>RetransSegs</code> is the number of TCP segments retransmitted.'
+        info: '<code>InErrs</code>是错误接收的TCP段数（包括头太小、校验和错误、序列错误、坏数据包-对于IPv4和IPv6）。'
+            + '  <code>InCsumErrors</code>是接收到的带有校验和错误的TCP段数（对于IPv4和IPv6）。'
+            + '  <code>RetransSegs</code>是重新传输的TCP段数。'
     },
 
     'ipv4.tcphandshake': {
-        info: '<code>EstabResets</code> is the number of established connections resets (i.e. connections that made a direct transition from <code>ESTABLISHED</code> or <code>CLOSE_WAIT</code> to <code>CLOSED</code>).'
-            + ' <code>OutRsts</code> is the number of TCP segments sent, with the <code>RST</code> flag set (for both IPv4 and IPv6).'
-            + ' <code>AttemptFails</code> is the number of times TCP connections made a direct transition from either <code>SYN_SENT</code> or <code>SYN_RECV</code> to <code>CLOSED</code>, plus the number of times TCP connections made a direct transition from the <code>SYN_RECV</code> to <code>LISTEN</code>.'
-            + ' <code>TCPSynRetrans</code> shows retries for new outbound TCP connections, which can indicate general connectivity issues or backlog on the remote host.'
+        info: '<code>EstabResets</code>是已建立的连接重置数（即从<code>已建立的连接或<code>关闭等待</code>直接转换为<code>关闭</code>）'
+            + ' <code>OutRsts</code>是发送的TCP段数，并设置了<code>RST</code>标志（对于IPv4和IPv6）。'
+            + '<code>AttemptFails</code>是TCP连接从<code>SYN_SENT</code>或<code>SYN_RECV</code>直接转换到<code>CLOSED</code>的次数，加上TCP连接从<code>SYN_RECV</code>直接转换到<code>LISTEN</code>的次数。'
+            + '  <code>TCPSynRetrans</code>显示新出站TCP连接的重试，这可能指示远程主机上的一般连接问题或积压工作。'
     },
 
     // ------------------------------------------------------------------------
@@ -1066,7 +1065,7 @@
     },
 
     'apps.mem': {
-        info: 'Real memory (RAM) used by applications. This does not include shared memory.'
+        info: '应用程序分配的虚拟内存。请查看<a href="https://github.com/netdata/netdata/tree/master/daemon#virtual-memory" target="_blank">本文</a> 以获取更多信息。'
     },
 
     'apps.vmem': {
@@ -1082,7 +1081,7 @@
     },
 
     'apps.uptime': {
-        info: 'Carried over process group uptime since the Netdata restart. The period of time within which at least one process in the group was running.'
+        info: '自Netdata重新启动以来，进程组的正常运行时间得以保留。该组中至少有一个进程正在运行的时间段。'
     },
 
     // ------------------------------------------------------------------------
@@ -1093,7 +1092,7 @@
     },
 
     'users.mem': {
-        info: 'Real memory (RAM) used per user. This does not include shared memory.'
+        info: '每个用户使用的实际内存（RAM）。这不包括共享内存。'
     },
 
     'users.vmem': {
@@ -1109,7 +1108,7 @@
     },
 
     'users.uptime': {
-        info: 'Carried over process group uptime since the Netdata restart. The period of time within which at least one process in the group was running.'
+        info: '自Netdata重新启动以来，进程组的正常运行时间得以保留。该组中至少有一个进程正在运行的时间段。'
     },
 
     // ------------------------------------------------------------------------
@@ -1120,7 +1119,7 @@
     },
 
     'groups.mem': {
-        info: 'Real memory (RAM) used per user group. This does not include shared memory.'
+        info: '每个用户组使用的实内存（RAM）。这不包括共享内存。'
     },
 
     'groups.vmem': {
@@ -1136,7 +1135,7 @@
     },
 
     'groups.uptime': {
-        info: 'Carried over process group uptime. The period of time within which at least one process in the group was running.'
+        info: '保留了流程组的正常运行时间。该组中至少有一个进程正在运行的时间段。'
     },
 
     // ------------------------------------------------------------------------
@@ -1148,9 +1147,9 @@
                 void (os);
 
                 if (id.match(/.*-ifb$/))
-                    return netdataDashboard.gaugeChart('Inbound', '12%', '', '#5555AA');
+                    return netdataDashboard.gaugeChart('入站', '12%', '', '#5555AA');
                 else
-                    return netdataDashboard.gaugeChart('Outbound', '12%', '', '#AA9900');
+                    return netdataDashboard.gaugeChart('出站', '12%', '', '#AA9900');
             }
         ]
     },
@@ -1169,7 +1168,7 @@
                     } catch (e) {
                         iface = '';
                     }
-                    return netdataDashboard.gaugeChart('Received' + iface, '12%', 'received');
+                    return netdataDashboard.gaugeChart('已收到' + iface, '20%', 'received');
                 } else
                     return '';
             },
@@ -1182,7 +1181,7 @@
                     } catch (e) {
                         iface = '';
                     }
-                    return netdataDashboard.gaugeChart('Sent' + iface, '12%', 'sent');
+                    return netdataDashboard.gaugeChart('已发送' + iface, '20%', 'sent');
                 } else
                     return '';
             }
@@ -1191,14 +1190,14 @@
             function (os, id) {
                 void (os);
                 if (!id.match(/^cgroup_.*/))
-                    return netdataDashboard.gaugeChart('Received', '12%', 'received');
+                    return netdataDashboard.gaugeChart('已收到', '20%', 'received');
                 else
                     return '';
             },
             function (os, id) {
                 void (os);
                 if (!id.match(/^cgroup_.*/))
-                    return netdataDashboard.gaugeChart('Sent', '12%', 'sent');
+                    return netdataDashboard.gaugeChart('已发送', '20%', 'sent');
                 else
                     return '';
             }
@@ -1211,13 +1210,13 @@
     'netfilter.sockets': {
         colors: '#88AA00',
         heads: [
-            netdataDashboard.gaugeChart('Active Connections', '12%', '', '#88AA00')
+            netdataDashboard.gaugeChart('活动连接', '12%', '', '#88AA00')
         ]
     },
 
     'netfilter.new': {
         heads: [
-            netdataDashboard.gaugeChart('New Connections', '12%', 'new', '#5555AA')
+            netdataDashboard.gaugeChart('新连接', '12%', 'new', '#5555AA')
         ]
     },
 
@@ -1227,58 +1226,58 @@
     'disk.util': {
         colors: '#FF5588',
         heads: [
-            netdataDashboard.gaugeChart('Utilization', '12%', '', '#FF5588')
+            netdataDashboard.gaugeChart('使用率', '22%', '', '#FF5588')
         ],
-        info: 'Disk Utilization measures the amount of time the disk was busy with something. This is not related to its performance. 100% means that the system always had an outstanding operation on the disk. Keep in mind that depending on the underlying technology of the disk, 100% here may or may not be an indication of congestion.'
+        info: '磁盘利用率衡量磁盘忙于处理某事的时间，这与其性能无关。100％表示系统始终在磁盘上进行读写的操作。根据磁盘的基础技术，此处100％可能不一定表示拥塞。'
     },
 
     'disk.backlog': {
         colors: '#0099CC',
-        info: 'Backlog is an indication of the duration of pending disk operations. On every I/O event the system is multiplying the time spent doing I/O since the last update of this field with the number of pending operations. While not accurate, this metric can provide an indication of the expected completion time of the operations in progress.'
+        info: 'Backlog表示挂起的磁盘操作的持续时间。在每个I/O事件上，系统将自上次更新此字段以来执行I/O所花费的时间与挂起的操作数相乘。虽然不准确，但这一指标可以提供正在进行的操作的预期完成时间的指示。'
     },
 
     'disk.io': {
         heads: [
-            netdataDashboard.gaugeChart('Read', '12%', 'reads'),
-            netdataDashboard.gaugeChart('Write', '12%', 'writes')
+            netdataDashboard.gaugeChart('读取', '22%', 'reads'),
+            netdataDashboard.gaugeChart('写入', '22%', 'writes')
         ],
-        info: 'Amount of data transferred to and from disk.'
+        info: '磁盘传输数据的速度。'
     },
 
     'disk.ops': {
-        info: 'Completed disk I/O operations. Keep in mind the number of operations requested might be higher, since the system is able to merge adjacent to each other (see merged operations chart).'
+        info: '已完成的磁盘I/O operations。实际上的operations数量可能更高，因为系统能够将它们互相合并 (详见operations图表)。'
     },
 
     'disk.qops': {
-        info: 'I/O operations currently in progress. This metric is a snapshot - it is not an average over the last interval.'
+        info: '目前正在进行I/O操作。此指标是快照不是上一个时间间隔的平均值。'
     },
 
     'disk.iotime': {
         height: 0.5,
-        info: 'The sum of the duration of all completed I/O operations. This number can exceed the interval if the disk is able to execute I/O operations in parallel.'
+        info: '所有已完成的I/O操作持续时间的总和。如果磁盘能够并行执行I/O操作，则此数目可以超过间隔'
     },
     'disk.mops': {
         height: 0.5,
-        info: 'The number of merged disk operations. The system is able to merge adjacent I/O operations, for example two 4KB reads can become one 8KB read before given to disk.'
+        info: '合并磁盘操作的数量。该系统能够合并相邻的I/O操作，例如，两个4KB读取可以变成一个8KB读取，然后再分配给磁盘。'
     },
     'disk.svctm': {
         height: 0.5,
-        info: 'The average service time for completed I/O operations. This metric is calculated using the total busy time of the disk and the number of completed operations. If the disk is able to execute multiple parallel operations the reporting average service time will be misleading.'
+        info: '完成的I/O操作的平均服务时间。使用磁盘的总繁忙时间和已完成的操作数来计算该指标。 如果磁盘能够执行多个并行操作，则报告的平均服务时间将产生误导'
     },
     'disk.avgsz': {
         height: 0.5,
-        info: 'The average I/O operation size.'
+        info: 'I/O operation平均大小。'
     },
     'disk.await': {
         height: 0.5,
-        info: 'The average time for I/O requests issued to the device to be served. This includes the time spent by the requests in queue and the time spent servicing them.'
+        info: '对要提供服务的设备发出I/O请求平均时间。这包含了请求在伫列中所花费的时间以及实际提供服务的时间。'
     },
 
     'disk.space': {
-        info: 'Disk space utilization. reserved for root is automatically reserved by the system to prevent the root user from getting out of space.'
+        info: '磁盘空间使用率。系统会自动为root使用者做保留，以防止root使用者使用过多。'
     },
     'disk.inodes': {
-        info: 'inodes (or index nodes) are filesystem objects (e.g. files and directories). On many types of file system implementations, the maximum number of inodes is fixed at filesystem creation, limiting the maximum number of files the filesystem can hold. It is possible for a device to run out of inodes. When this happens, new files cannot be created on the device, even though there may be free space available.'
+        info: '索引节点（或索引节点）是文件系统对象（如文件和目录）。在许多类型的文件系统实现中，索引节点的最大数量在文件系统创建时是固定的，这限制了文件系统可以容纳的最大文件数量。设备可能会耗尽索引节点。发生这种情况时，即使可能有可用空间，也无法在设备上创建新文件'
     },
 
     'mysql.net': {
@@ -1355,9 +1354,9 @@
     },
 
     'mysql.open_transactions': {
-        info: 'The number of locally running transactions which have been registered inside the wsrep provider. ' +
-            'This means transactions which have made operations which have caused write set population to happen. ' +
-            'Transactions which are read only are not counted.'
+        info: '在wsrep提供程序中已注册的本地运行的事务数。' +
+            '这意味着进行了导致写入集填充的操作的事务。 ' +
+            '只读的事务不计算在内。'
     },
 
 
@@ -1435,21 +1434,21 @@
     'apache.connections': {
         colors: NETDATA.colors[4],
         mainheads: [
-            netdataDashboard.gaugeChart('Connections', '12%', '', NETDATA.colors[4])
+            netdataDashboard.gaugeChart('连接数', '12%', '', NETDATA.colors[4])
         ]
     },
 
     'apache.requests': {
         colors: NETDATA.colors[0],
         mainheads: [
-            netdataDashboard.gaugeChart('Requests', '12%', '', NETDATA.colors[0])
+            netdataDashboard.gaugeChart('要求', '12%', '', NETDATA.colors[0])
         ]
     },
 
     'apache.net': {
         colors: NETDATA.colors[3],
         mainheads: [
-            netdataDashboard.gaugeChart('Bandwidth', '12%', '', NETDATA.colors[3])
+            netdataDashboard.gaugeChart('带宽', '12%', '', NETDATA.colors[3])
         ]
     },
 
@@ -1496,21 +1495,21 @@
     'lighttpd.connections': {
         colors: NETDATA.colors[4],
         mainheads: [
-            netdataDashboard.gaugeChart('Connections', '12%', '', NETDATA.colors[4])
+            netdataDashboard.gaugeChart('连接数', '12%', '', NETDATA.colors[4])
         ]
     },
 
     'lighttpd.requests': {
         colors: NETDATA.colors[0],
         mainheads: [
-            netdataDashboard.gaugeChart('Requests', '12%', '', NETDATA.colors[0])
+            netdataDashboard.gaugeChart('要求', '12%', '', NETDATA.colors[0])
         ]
     },
 
     'lighttpd.net': {
         colors: NETDATA.colors[3],
         mainheads: [
-            netdataDashboard.gaugeChart('Bandwidth', '12%', '', NETDATA.colors[3])
+            netdataDashboard.gaugeChart('带宽', '12%', '', NETDATA.colors[3])
         ]
     },
 
@@ -1523,7 +1522,7 @@
                     + ' data-append-options="percentage"'
                     + ' data-gauge-max-value="100"'
                     + ' data-chart-library="gauge"'
-                    + ' data-title="Servers Utilization"'
+                    + ' data-title="服务器利用率"'
                     + ' data-units="percentage %"'
                     + ' data-gauge-adjust="width"'
                     + ' data-width="12%"'
@@ -1556,14 +1555,14 @@
     'nginx.connections': {
         colors: NETDATA.colors[4],
         mainheads: [
-            netdataDashboard.gaugeChart('Connections', '12%', '', NETDATA.colors[4])
+            netdataDashboard.gaugeChart('连接数', '12%', '', NETDATA.colors[4])
         ]
     },
 
     'nginx.requests': {
         colors: NETDATA.colors[0],
         mainheads: [
-            netdataDashboard.gaugeChart('Requests', '12%', '', NETDATA.colors[0])
+            netdataDashboard.gaugeChart('要求', '12%', '', NETDATA.colors[0])
         ]
     },
 
@@ -1571,26 +1570,26 @@
     // HTTP check
 
     'httpcheck.responsetime': {
-        info: 'The <code>response time</code> describes the time passed between request and response. ' +
-            'Currently, the accuracy of the response time is low and should be used as reference only.'
+        info: '<code>响应时间</code>描述了请求和响应之间经过的时间。 ' +
+            '当前的响应时间的准确性较低，仅应作为参考。'
     },
 
     'httpcheck.responselength': {
-        info: 'The <code>response length</code> counts the number of characters in the response body. For static pages, this should be mostly constant.'
+        info: '<code>响应长度</code>计算响应正文中的字符数。对于静态页面应该基本保持不变。'
     },
 
     'httpcheck.status': {
         valueRange: "[0, 1]",
-        info: 'This chart verifies the response of the webserver. Each status dimension will have a value of <code>1</code> if triggered. ' +
-            'Dimension <code>success</code> is <code>1</code> only if all constraints are satisfied. ' +
-            'This chart is most useful for alarms or third-party apps.'
+        info: '此图表验证了Web服务器的响应。如果触发，每个状态维度的值将为<code>1</code>。 ' +
+            '只有满足所有约束时，维度<code>成功</code>才是<code>1</code>的。 ' +
+            '此图表对于警报或第三方应用程序最有用。'
     },
 
     // ------------------------------------------------------------------------
     // NETDATA
 
     'netdata.response_time': {
-        info: 'The netdata API response time measures the time netdata needed to serve requests. This time includes everything, from the reception of the first byte of a request, to the dispatch of the last byte of its reply, therefore it includes all network latencies involved (i.e. a client over a slow network will influence these metrics).'
+        info: 'netdata API响应时间用于衡量服务请求所需的netdata时间。 这段时间包括从接收请求的第一个字节到发送其答复的最后一个字节的所有内容，因此它包括所有涉及的网络延迟（就是网络速度较慢的客户端会影响这些指标）。'
     },
 
     // ------------------------------------------------------------------------
@@ -1599,8 +1598,8 @@
     'retroshare.bandwidth': {
         info: 'RetroShare inbound and outbound traffic.',
         mainheads: [
-            netdataDashboard.gaugeChart('Received', '12%', 'bandwidth_down_kb'),
-            netdataDashboard.gaugeChart('Sent', '12%', 'bandwidth_up_kb')
+            netdataDashboard.gaugeChart('已收到', '12%', 'bandwidth_down_kb'),
+            netdataDashboard.gaugeChart('已发送', '12%', 'bandwidth_up_kb')
         ]
     },
 
@@ -1625,7 +1624,7 @@
     },
 
     'retroshare.dht': {
-        info: 'Statistics about RetroShare\'s DHT. These values are estimated!'
+        info: '关于RetroShare的DHT的统计数据。这些值是估计的！'
     },
 
     // ------------------------------------------------------------------------
@@ -1699,7 +1698,7 @@
                     + ' data-append-options="percentage"'
                     + ' data-gauge-max-value="100"'
                     + ' data-chart-library="gauge"'
-                    + ' data-title="Memory"'
+                    + ' data-title="内存"'
                     + ' data-units="%"'
                     + ' data-gauge-adjust="width"'
                     + ' data-width="12%"'
@@ -1719,7 +1718,7 @@
                 if (cgroupMemLimitIsSet === 0) {
                     return '<div data-netdata="' + id + '"'
                         + ' data-chart-library="gauge"'
-                        + ' data-title="Memory"'
+                        + ' data-title="内存"'
                         + ' data-units="MB"'
                         + ' data-gauge-adjust="width"'
                         + ' data-width="12%"'
@@ -1741,7 +1740,7 @@
                 return '<div data-netdata="' + id + '"'
                     + ' data-dimensions="read"'
                     + ' data-chart-library="gauge"'
-                    + ' data-title="Read Disk I/O"'
+                    + ' data-title="磁盘读取I/O"'
                     + ' data-units="KB/s"'
                     + ' data-gauge-adjust="width"'
                     + ' data-width="12%"'
@@ -1756,7 +1755,7 @@
                 return '<div data-netdata="' + id + '"'
                     + ' data-dimensions="write"'
                     + ' data-chart-library="gauge"'
-                    + ' data-title="Write Disk I/O"'
+                    + ' data-title="磁盘写入I/O"'
                     + ' data-units="KB/s"'
                     + ' data-gauge-adjust="width"'
                     + ' data-width="12%"'
@@ -1773,40 +1772,40 @@
     // beanstalkd
     // system charts
     'beanstalk.cpu_usage': {
-        info: 'Amount of CPU Time for user and system used by beanstalkd.'
+        info: 'beantalkd使用的用户和系统的CPU时间量。'
     },
 
     // This is also a per-tube stat
     'beanstalk.jobs_rate': {
-        info: 'The rate of jobs processed by the beanstalkd served.'
+        info: '空闲处理的工作率。'
     },
 
     'beanstalk.connections_rate': {
-        info: 'Tthe rate of connections opened to beanstalkd.'
+        info: '对beantalk敞开的连接速率。'
     },
 
     'beanstalk.commands_rate': {
-        info: 'The rate of commands received by beanstalkd.'
+        info: 'beantalkd接收到的命令的速率。'
     },
 
     'beanstalk.current_tubes': {
-        info: 'Total number of current tubes on the server including the default tube (which always exists).'
+        info: '服务器上当前管道的总数，包括默认管道（始终存在）。'
     },
 
     'beanstalk.current_jobs': {
-        info: 'Current number of jobs in all tubes grouped by status: urgent, ready, reserved, delayed and buried.'
+        info: '按状态分组的所有管道中的当前作业数：紧急、就绪、保留、延迟和隐藏。'
     },
 
     'beanstalk.current_connections': {
-        info: 'Current number of connections group by connection type: written, producers, workers, waiting.'
+        info: '当前连接数按连接类型分组：书面的，生产者的，工人的，等待的。'
     },
 
     'beanstalk.binlog': {
-        info: 'The rate of records <code>written</code> to binlog and <code>migrated</code> as part of compaction.'
+        info: '作为压缩的一部分，将记录<code>写入</code>到二进制记录和<code>迁移</code>的记录的速率。'
     },
 
     'beanstalk.uptime': {
-        info: 'Total time beanstalkd server has been up for.'
+        info: 'beantalkd服务器的总时间已到。'
     },
 
     // tube charts
@@ -1815,26 +1814,26 @@
     },
 
     'beanstalk.connections': {
-        info: 'The current number of connections to this tube grouped by connection type; using, waiting and watching.'
+        info: '按连接类型分组的到此管的当前连接数；使用、等待和监视。'
     },
 
     'beanstalk.commands': {
-        info: 'The rate of <code>delete</code> and <code>pause</code> commands executed by beanstalkd.'
+        info: 'beanstalk执行的<code>删除</code>和<code>暂停</code>命令的速率。'
     },
 
     'beanstalk.pause': {
-        info: 'Shows info on how long the tube has been paused for, and how long is left remaining on the pause.'
+        info: '显示有关暂停时间的信息，以及暂停时间还剩多长。'
     },
 
     // ------------------------------------------------------------------------
     // ceph
 
     'ceph.general_usage': {
-        info: 'The usage and available space in all ceph cluster.'
+        info: '所有ceph集群中的使用情况和可用空间。'
     },
 
     'ceph.general_objects': {
-        info: 'Total number of objects storage on ceph cluster.'
+        info: 'ceph集群上存储的对象总数。'
     },
 
     'ceph.general_bytes': {
@@ -1846,7 +1845,7 @@
     },
 
     'ceph.general_latency': {
-        info: 'Total of apply and commit latency in all OSDs. The apply latency is the total time taken to flush an update to disk. The commit latency is the total time taken to commit an operation to the journal.'
+        info: '所有OSD中的应用和提交延迟总计。应用延迟是将更新刷新到磁盘所花费的总时间。 提交延迟是将操作提交到日志所花费的总时间。'
     },
 
     'ceph.pool_usage': {
@@ -1854,23 +1853,23 @@
     },
 
     'ceph.pool_objects': {
-        info: 'Number of objects presents in each pool.'
+        info: '每个池中存在的对象数。'
     },
 
     'ceph.pool_read_bytes': {
-        info: 'The rate of read data per second in each pool.'
+        info: '每个池中每秒读取数据的速率。'
     },
 
     'ceph.pool_write_bytes': {
-        info: 'The rate of write data per second in each pool.'
+        info: '每个池中每秒写入数据的速率。'
     },
 
     'ceph.pool_read_objects': {
-        info: 'Number of read objects per second in each pool.'
+        info: '每个池中每秒读取的对象数。'
     },
 
     'ceph.pool_write_objects': {
-        info: 'Number of write objects per second in each pool.'
+        info: '每个池中每秒写入对象的数目。'
     },
 
     'ceph.osd_usage': {
@@ -1914,7 +1913,7 @@
                 return '<div data-netdata="' + id + '"'
                     + ' data-dimensions="redirect"'
                     + ' data-chart-library="gauge"'
-                    + ' data-title="Redirects"'
+                    + ' data-title="重定向"'
                     + ' data-units="requests/s"'
                     + ' data-gauge-adjust="width"'
                     + ' data-width="12%"'
@@ -1932,7 +1931,7 @@
                 return '<div data-netdata="' + id + '"'
                     + ' data-dimensions="bad"'
                     + ' data-chart-library="gauge"'
-                    + ' data-title="Bad Requests"'
+                    + ' data-title="错误的请求"'
                     + ' data-units="requests/s"'
                     + ' data-gauge-adjust="width"'
                     + ' data-width="12%"'
@@ -1950,7 +1949,7 @@
                 return '<div data-netdata="' + id + '"'
                     + ' data-dimensions="error"'
                     + ' data-chart-library="gauge"'
-                    + ' data-title="Server Errors"'
+                    + ' data-title="服务器错误"'
                     + ' data-units="requests/s"'
                     + ' data-gauge-adjust="width"'
                     + ' data-width="12%"'
@@ -1983,7 +1982,7 @@
                 return '<div data-netdata="' + id + '"'
                     + ' data-dimensions="avg"'
                     + ' data-chart-library="gauge"'
-                    + ' data-title="Average Response Time"'
+                    + ' data-title="平均响应时间"'
                     + ' data-units="milliseconds"'
                     + ' data-gauge-adjust="width"'
                     + ' data-width="12%"'
@@ -1998,15 +1997,15 @@
     },
 
     'web_log.detailed_response_codes': {
-        info: 'Number of responses for each response code individually.'
+        info: '每个响应代码的响应数。'
     },
 
     'web_log.requests_per_ipproto': {
-        info: 'Web server requests received per IP protocol version.'
+        info: '每个IP协议版本接收的Web服务器请求数。'
     },
 
     'web_log.clients': {
-        info: 'Unique client IPs accessing the web server, within each data collection iteration. If data collection is <b>per second</b>, this chart shows <b>unique client IPs per second</b>.'
+        info: '在每次数据收集迭代中，访问Web服务器的唯一客户端IP。如果数据收集是<b>每秒</b>，则此图表显示<b>每秒唯一的客户端IP </b>。'
     },
 
     'web_log.clients_all': {
@@ -2065,7 +2064,7 @@
                 return '<div data-netdata="' + id + '"'
                     + ' data-dimensions="bad"'
                     + ' data-chart-library="gauge"'
-                    + ' data-title="Bad Requests"'
+                    + ' data-title="错误的要求"'
                     + ' data-units="requests/s"'
                     + ' data-gauge-adjust="width"'
                     + ' data-width="12%"'
@@ -2118,7 +2117,7 @@
                 return '<div data-netdata="' + id + '"'
                     + ' data-dimensions="avg"'
                     + ' data-chart-library="gauge"'
-                    + ' data-title="Average Response Time"'
+                    + ' data-title="平均响应时间"'
                     + ' data-units="milliseconds"'
                     + ' data-gauge-adjust="width"'
                     + ' data-width="12%"'
@@ -2133,7 +2132,7 @@
     },
 
     'web_log.squid_detailed_response_codes': {
-        info: 'Number of responses for each response code individually.'
+        info: '每个响应代码的响应数。'
     },
 
     'web_log.squid_clients': {
@@ -2467,19 +2466,19 @@
     },
 
     'spigotmc.tps': {
-        info: 'The running 1, 5, and 15 minute average number of server ticks per second.  An idealized server will show 20.0 for all values, but in practice this almost never happens.  Typical servers should show approximately 19.98-20.0 here.  Lower values indicate progressively more server-side lag (and thus that you need better hardware for your server or a lower user limit).  For every 0.05 ticks below 20, redstone clocks will lag behind by approximately 0.25%.  Values below approximately 19.50 may interfere with complex free-running redstone circuits and will noticeably slow down growth.'
+        info: '每秒运行的1、5和15分钟平均服务器滴答数。 理想化的服务器将对所有值显示20.0，但是实际上这几乎不会发生。 典型的服务器应该显示大约19.98-20.0。 较低的值表示逐渐增加的服务器端滞后时间（因此，您需要更好的服务器硬件或更低的用户限制）。 对于低于20的0.05个滴答声，红石钟将落后约0.25％。 低于约19.50的值可能会干扰复杂的自由运行的红石电路，并会显着减慢增长。'
     },
 
     'spigotmc.users': {
-        info: 'The number of currently connect users on the monitored Spigot server.'
+        info: '受监视的插口服务器上当前连接的用户数。'
     },
 
     'boinc.tasks': {
-        info: 'The total number of tasks and the number of active tasks.  Active tasks are those which are either currently being processed, or are partialy processed but suspended.'
+        info: '任务总数和活动任务数。活动任务是当前正在处理的任务，或者是部分处理但挂起的任务。'
     },
 
     'boinc.states': {
-        info: 'Counts of tasks in each task state.  The normal sequence of states is <code>New</code>, <code>Downloading</code>, <code>Ready to Run</code>, <code>Uploading</code>, <code>Uploaded</code>.  Tasks which are marked <code>Ready to Run</code> may be actively running, or may be waiting to be scheduled.  <code>Compute Errors</code> are tasks which failed for some reason during execution.  <code>Aborted</code> tasks were manually cancelled, and will not be processed.  <code>Failed Uploads</code> are otherwise finished tasks which failed to upload to the server, and usually indicate networking issues.'
+        info: '每个任务状态下的任务计数。正常的状态顺序是<code>New</code>，<code>Downloading</code>，<code>Ready to Run</code>，<code>Uploading</code>，<code>Uploaded</code>。标记为“准备运行”的任务可能正在运行，也可能正在等待计划。<code>计算错误</code>是在执行过程中由于某种原因失败的任务。<code>已中止</code>任务已手动取消，将不处理。<code>上载失败</code>是在其他情况下完成的任务，这些任务无法上载到服务器，通常表示存在网络问题。'
     },
 
     'boinc.sched': {
@@ -2655,27 +2654,27 @@
 
     // Common
     'vsphere.cpu_usage_total': {
-        info: 'Summary CPU usage statistics across all CPUs/cores.'
+        info: '所有CPU/核心的CPU使用情况摘要统计信息。'
     },
 
     'vsphere.net_bandwidth_total': {
-        info: 'Summary receive/transmit statistics across all network interfaces.'
+        info: '汇总所有网络接口的接收/传输统计信息。'
     },
 
     'vsphere.net_packets_total': {
-        info: 'Summary receive/transmit statistics across all network interfaces.'
+        info: '汇总所有网络接口的接收/传输统计信息。'
     },
 
     'vsphere.net_errors_total': {
-        info: 'Summary receive/transmit statistics across all network interfaces.'
+        info: '汇总所有网络接口的接收/传输统计信息。'
     },
 
     'vsphere.net_drops_total': {
-        info: 'Summary receive/transmit statistics across all network interfaces.'
+        info: '汇总所有网络接口的接收/传输统计信息。'
     },
 
     'vsphere.disk_usage_total': {
-        info: 'Summary read/write statistics across all disks.'
+        info: '汇总所有磁盘的读/写统计信息。'
     },
 
     'vsphere.disk_max_latency': {
@@ -2874,15 +2873,15 @@
     },
 
     'cockroachdb.host_disk_bandwidth': {
-        info: 'Summary disk bandwidth statistics across all system host disks.'
+        info: '所有系统主机磁盘的摘要磁盘带宽统计信息。'
     },
 
     'cockroachdb.host_disk_operations': {
-        info: 'Summary disk operations statistics across all system host disks.'
+        info: '所有系统主机磁盘上的磁盘操作摘要统计信息。'
     },
 
     'cockroachdb.host_disk_iops_in_progress': {
-        info: 'Summary disk iops in progress statistics across all system host disks.'
+        info: '所有系统主机磁盘上正在进行的摘要磁盘iops统计信息。'
     },
 
     'cockroachdb.host_network_bandwidth': {
